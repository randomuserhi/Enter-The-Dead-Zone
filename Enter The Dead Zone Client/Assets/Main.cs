using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using DeadZoneEngine;
using DeadZoneEngine.Entities;
using ClientHandle;
using DeadZoneEngine.Controllers;

public static class Main
{
    //Sorting layers for rendering
    public enum SortingLayers
    {
        Default
    }
    private static DZEngine.ManagedList<IRenderer<SpriteRenderer>> SpriteRenderers = new DZEngine.ManagedList<IRenderer<SpriteRenderer>>(); //List of SpriteRenderers

    // Start is called before the first frame update
    public static void Start()
    {
        InputManager.Initialize();

        LoadMenu();
    }

    private static Tilemap MenuMap;
    private static List<TriggerPlate> TriggerPlates = new List<TriggerPlate>();

    public static void LoadMenu()
    {
        const string MenuFloorMap =
            @"
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/
            0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1/0,0,0,1
            ";

        const string MenuWallMap =
            @"
            1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/0,0,1,0/1,1,0,1/
            1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1/1,1,0,1
            ";

        if (Game.Client == null)
        {
            Game.Client = Client.GetClient();
        }

        MenuMap = (Tilemap)new Tilemap(32, 64, new Vector2Int(20, 20), Tilemap.TilesFromString(MenuFloorMap), Tilemap.TilesFromString(MenuWallMap)).Create();
        TriggerPlates.Add(new TriggerPlate(new Vector2(4, 2), new Vector2(0, -3)));
    }

    // Update is called once per frame
    public static void FixedUpdate()
    {
        foreach (IRenderer<SpriteRenderer> Renderer in SpriteRenderers)
        {
            if (Renderer.SortingLayer == (int)SortingLayers.Default)
                Renderer.RenderObject.sortingOrder = Mathf.RoundToInt(-Renderer.RenderObject.transform.position.y * 10);
        }
    }
}
