// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TilemapRender

struct Tile
{
	int NumFrames;
	int AnimationFrame;
	int TileIndex;
};

RWTexture2D<float4> Result;
Texture2D<float4> TilePallet;
RWStructuredBuffer<Tile> Map;
int TileStride;
int MapHeight;
int TileDimension;
//TODO:: maybe implement some type of transparency colour

[numthreads(1,1,1)]
void TilemapRender(uint3 id : SV_DispatchThreadID)
{
	for (int i = MapHeight - 1; i >= 0; i--) //Loop from top of texture to the bottom
	{
		Tile T = Map[id.x * MapHeight + i];
		for (int x = 0; x < TileDimension; x++)
		{
			for (int y = TileStride - 1; y >= 0; y--)
			{
				int RenderYIndex = i * TileDimension + y;
				uint2 TilePalletIndex = uint2(x, T.TileIndex * TileStride + y);
				uint2 RenderIndex = uint2(id.x * TileDimension + x, RenderYIndex);
				Result[RenderIndex] = TilePallet[TilePalletIndex];
			}
		}
	}
}